<!DOCTYPE html>
<html>
<head>
<% include ../include/header.ejs %>
<link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.5.0/styles/agate.min.css">
</head>
<body>
<% include ../include/topNav.ejs %>

<!-- Page Content -->
<div class="container">

    <div class="row">

        <!-- Blog Entries Column -->
        <div class="col-md-8">

            <!-- Blog Post -->

            <!-- Title -->
            <h1>JVM Architecture 01 - Java Memory Model</h1>

            <!-- Author -->
            <p class="lead">
                by GWang
            </p>

            <hr>

            <!-- Date/Time -->
            <p><span class="glyphicon glyphicon-time"></span> Posted on 08/11/2016</p>

            <hr>
            <p>Sometimes, when we develop program that needs high demand of thread
                synchronization and thread security, we usually neglect one thing - Java Memory Model.</p>
            <h3>Principle of memory model</h3>
            <ol>
                <li>Atomicity</li>
                <li>Visibility</li>
                <li>Ordering</li>
            </ol>
            <p>These three principle is very important if you want to go deeply in java concurrency, but here
                we mainly talk about java memory model, so I'm not going to write the details and concept of
                them. If you are interested, It's very easily to find in google. </p>
            <br>
            <h3>What does JMM (Java Memory Model) looks like</h3>
            <p>Java Memory model describes relationship of each variable in our program, as well as the
                details of store variable into memory or take out variable from memory. The variable mentioned
                here is different from the variable we used in JAVA programming, it includes instance fields,
                static fields and arrays, exclusive of local variable and method arguments, cause local
                variable and method arguments are private in each thread, will not be shared.</p>


            <p>All thread shared variable will stored in main memory. Each thread has a private local/working
                memory that mainly used to save the copy of variable stored in main memory. All operation act
                on variable (read and write) must processes in local/working memory, it is not allowed to
                directly operate variable in main memory. Each thread not able to access other thread
                local/working memory, all variable transmission operation must be handled in main memory.</p>

            <img class="postimg" src="/images/JVM Architecture 01.png">

            <p>The main memory and working memory written here is different form java heap, stack and method
                area we used in Java memory region. They are stand in different classified memory level. I'll
                explain that in later post.</p>


            <hr>


        </div>
        <!-- Blog Sidebar Widgets Column -->
        <div class="col-md-4">


        </div>

    </div>
    <!-- /.row -->

    <hr>

    <% include ../include/footer.ejs %>

    <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.5.0/highlight.min.js"></script>
    <script>
        hljs.initHighlightingOnLoad();
    </script>
</div>
</body>
</html>
