<!DOCTYPE html>
<html>
<head>
<% include ../include/header.ejs %>
<link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.5.0/styles/agate.min.css">
</head>
<body>
<% include ../include/topNav.ejs %>

<!-- Page Content -->
<div class="container">

    <div class="row">

        <!-- Blog Entries Column -->
        <div class="col-md-8">

            <!-- Blog Post -->

            <!-- Title -->
            <h1>JAVA Design Pattern: Singleton</h1>

            <!-- Author -->
            <p class="lead">
                by GWang
            </p>

            <hr>

            <!-- Date/Time -->
            <p><span class="glyphicon glyphicon-time"></span> Posted on 08/11/2016</p>

            <hr>

            <h3>1.Application Scenarios</h3>
            <p>When we build a class which allow only one unique instance to be generated in our application</p>
            <h3>2.Lazy Load & Hungry Load</h3>
            <pre><span>LazySingleton.java</span>
                <code class="java">
public class LazySingleton {
    private static LazySingleton uniqueInstance = null;

    private LazySingleton(){}

    public static synchronized LazySingleton getInstance(){
        if (null == uniqueInstance){
            uniqueInstance = new LazySingleton();
        }
        return uniqueInstance;
    }
}
                </code>
            </pre>
            <pre><span>HungrySingleton.java</span>
                <code class="java">
public class HungrySingleton {
    private static HungrySingleton uniqueInstance = new HungrySingleton();

    private HungrySingleton(){}

    private static HungrySingleton getInstance(){
        return uniqueInstance;
    }
}
                </code>
            </pre>
            <p>Set class constructor private so that prevent class instantiation outside this class. Besides,
                in order to return our unique instance, we must provide a public method.</p>
            <p>We usually use lazy load as our first choice, because hungry load class instantiates very earlier
               so that cost too much memory.</p>
            <h3>3.Thread Safe Issue</h3>
            <p>If you only use singleton in single thread, that wil be fine for above singleton class. But
            mostly our application running on the multithreading environment. So we must care about thread safe issue. </p>
            <p>Why it is not thread safe? For example, we have two thread A and B running getInstance method
                at same time, due to is first time, uniqueInstance will be null, so A thread get into "if" block,  meanwhile B thread also do check
             "null == uniqueInstance", because A thread didn't do "new LazySingleton()" yet, so B thread also can get into "if" block.
            At this time two threads will get two different instance object.</p>
            <h3>4.How To Make It Thread Safe</h3>
            <p>Hungry load version is thread safe definitely, so we are here only talk about lazy load version.</p>
            <p>We can use synchronized getInstance method to make sure at same time only allow one thread
                into method, but the performance is very low</p>



            <h4><span class="glyphicon glyphicon-folder-open"></span> Project repository :  <a target="_blank" href="https://github.com/gwang-it/hibernate-helloworld">click here</a></h4>
            <hr>
        </div>
        <!-- Blog Sidebar Widgets Column -->
        <div class="col-md-4">


        </div>

    </div>
    <!-- /.row -->

    <hr>

    <% include ../include/footer.ejs %>

    <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.5.0/highlight.min.js"></script>
    <script>
        hljs.initHighlightingOnLoad();
    </script>
</div>
</body>
</html>
